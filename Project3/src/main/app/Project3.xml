<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
	<http:listener-config name="HTTP_Listener_Configuration"
		host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration">
		<http:worker-threading-profile
			poolExhaustedAction="WAIT" />
	</http:listener-config>
	<mulexml:jaxb-context name="JAXB_Context"
		packageNames="is.project3.smartphones.xml" doc:name="JAXB Context" />
	<db:mysql-config name="MySQL_Configuration" host="localhost"
		port="3306" user="root" database="isproject3" doc:name="MySQL Configuration" />
	<smtps:connector name="SMTP_Connector" fromAddress="${smtp.user}@student.dei.uc.pt"
		validateConnections="true" doc:name="SMTP">
		<smtps:tls-client path="keystore.jks" storePassword="123456" />
		<smtps:tls-trust-store path="truststore.jks"
			storePassword="123456" />
	</smtps:connector>
    <file:connector name="File" autoDelete="true" streaming="true" validateConnections="true" doc:name="File"/>
	<flow name="HTTP-CreateDatabase" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="create_database" doc:name="GET create_database" allowedMethods="GET" />
		<db:bulk-execute config-ref="MySQL_Configuration"
			doc:name="Create database" file="src/main/resources/create_database.sql"></db:bulk-execute>
		<set-payload value="Database created." doc:name="Database created."
			encoding="UTF-8" mimeType="text/plain" />
	</flow>
	<flow name="HTTP-Subscribe" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="subscribe" doc:name="POST subscribe" allowedMethods="POST" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<expression-component doc:name="payload.channel = 'Web'"><![CDATA[payload.channel = 'Web']]></expression-component>
		<flow-ref name="Subscribe" doc:name="Subscribe" />
		<set-payload
			value="A mail was sent with an activation link to start receiving smartphone updates."
			encoding="UTF-8" mimeType="text/plain"
			doc:name="A mail was sent with an activation link to start receiving smartphone updates." />
	</flow>
	<flow name="HTTP-Unsubcribe" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="unsubscribe" allowedMethods="GET,POST" doc:name="GET|POST unsubscribe" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<flow-ref name="Unsubscribe" doc:name="Unsubscribe" />
		<choice doc:name="(payload) null? false?">
			<when expression="#[payload == null]">
				<set-payload value="The subscription was deleted."
					encoding="UTF-8" mimeType="text/plain" doc:name="The subscription was deleted." />
			</when>
			<when expression="#[payload == false]">
				<set-payload value="The subscription does not exist."
					encoding="UTF-8" mimeType="text/plain" doc:name="The subscription does not exist." />
			</when>
			<otherwise>
				<scripting:component
					doc:name="throw new RuntimeException(&quot;The subscription still exists.&quot;)">
					<scripting:script engine="Groovy"><![CDATA[throw new RuntimeException("The subscription still exists.")]]></scripting:script>
				</scripting:component>
			</otherwise>
		</choice>
	</flow>
	<flow name="HTTP-EmailSubscriptions" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="email_subscriptions" allowedMethods="POST" doc:name="POST email_subscriptions" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<set-variable variableName="email" value="#[payload.email]"
			doc:name="email = payload.email" />
		<set-payload value="#[email]" doc:name="email" />
		<flow-ref name="Email-Subscriptions" doc:name="Email-Subscriptions" />
		<set-payload
			value="A mail was sent to #[email] only if the email had subscriptions. No futher feedback is given here to protect the subscriber's privacy."
			doc:name="A mail was sent to #[email] only if the email had subscriptions. No futher feedback is given here to protect the subscriber's privacy." />
	</flow>
	<flow name="HTTP-ActivateSubscription" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="activate_subscription" allowedMethods="GET"
			doc:name="GET activate_subscription" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<flow-ref name="Activate-Subscription" doc:name="Activate-Subscription" />
		<choice doc:name="payload != null?">
			<when expression="#[payload != null]">
				<set-payload
					value="Subscription activated, email will start receiving smartphones that match the subscription."
					encoding="UTF-8" mimeType="text/plain"
					doc:name="Subscription activated, email will start receiving smartphones that match the subscription." />
			</when>
			<otherwise>
				<set-payload value="Subscription not found." encoding="UTF-8"
					mimeType="text/plain" doc:name="Subscription not found." />
			</otherwise>
		</choice>
	</flow>
	<flow name="HTTP-*" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="*" allowedMethods="GET" doc:name="GET *" />
		<http:static-resource-handler
			resourceBase="src/main/resources/www" defaultFile="index.html"
			doc:name="src/main/resources/www" />
	</flow>
	<flow name="SOAP-SubscriptionService" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="subscription_service" doc:name="SOAP subscription_service" />
		<cxf:jaxws-service serviceClass="is.project3.subscriptions.SubscriptionService"
			validationEnabled="true" doc:name="Subscription Service" />
		<choice doc:name="(cxf_operation) subscribe? unsubscribe? email_subscriptions?">
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}subscribe&quot;).equals(cxf_operation)]">
				<set-payload
					value="#[[ 'channel' : 'SOAP' , 'email' : payload[0] , 'clientName' : payload[1] , 'favoriteBrand' : payload[2] , 'minimumPrice' : payload[3] , 'maximumPrice' : payload[4] ]]"
					doc:name="Map (channel = 'SOAP', email, clientName, favoriteBrand, minimumPrice, maximumPrice)" />
				<flow-ref name="Subscribe" doc:name="Subscribe" />
				<set-payload value="#[payload != null]" doc:name="payload != null" />
			</when>
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}unsubscribe&quot;).equals(cxf_operation)]">
				<set-payload value="#[[ 'email' : payload[0] , 'uuid' : payload[1] ]]"
					doc:name="Map (email, uuid)" />
				<flow-ref name="Unsubscribe" doc:name="Unsubscribe" />
				<choice doc:name="(payload) null? false?">
					<when expression="#[payload == null]">
						<set-payload value="#[true]" doc:name="true" />
					</when>
					<when expression="#[payload == false]">
						<scripting:component
							doc:name="throw new RuntimeException(&quot;Subscription not found.&quot;)">
							<scripting:script engine="Groovy"><![CDATA[throw new RuntimeException("Subscription not found.")]]></scripting:script>
						</scripting:component>
					</when>
					<otherwise>
						<set-payload value="#[false]" doc:name="false" />
					</otherwise>
				</choice>
			</when>
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}emailSubscriptions&quot;).equals(cxf_operation)]">
				<set-payload value="#[payload]" doc:name="email" />
				<flow-ref name="Email-Subscriptions" doc:name="Email-Subscriptions" />
			</when>
			<otherwise>
				<scripting:component
					doc:name="throw new UnsupportedOperationException(&quot;\&quot;&quot;+cxf_operation.toString()+&quot;\&quot;&quot;)">
					<scripting:script engine="Groovy"><![CDATA[throw new UnsupportedOperationException("\""+cxf_operation.toString()+"\"")]]></scripting:script>
				</scripting:component>
			</otherwise>
		</choice>
	</flow>
	<sub-flow name="Subscribe"
		doc:description="input.payload = Map|Subscription (email, clientName, channel, favoriteBrand, minimumPrice, maximumPrice)
output.payload = Subscription">
		<set-variable variableName="subscription" value="#[payload]"
			doc:name="subscription = payload" doc:description="Expects is.project3.subscriptions.Subscription" />
		<db:select config-ref="MySQL_Configuration" doc:name="Get uuids">
			<db:parameterized-query><![CDATA[SELECT uuid from subscription]]></db:parameterized-query>
		</db:select>
		<scripting:transformer returnClass="java.lang.String"
			doc:name="New Unique UUID">
			<scripting:script engine="Groovy"><![CDATA[def uuid = null;
def unique = false;
while (!unique) {
	uuid = org.mule.util.UUID.getUUID();
	unique = true;
	payload.each {
		if (it.uuid == uuid) {
			unique = false;
		}
	}
}
payload = uuid;
]]></scripting:script>
		</scripting:transformer>
		<expression-component doc:name="subscription.uuid = payload"><![CDATA[subscription.uuid = payload]]></expression-component>
		<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
			<db:insert config-ref="MySQL_Configuration" doc:name="Insert subscription">
				<db:parameterized-query><![CDATA[INSERT INTO subscription (email, clientName, channel, favoriteBrand, minimumPrice, maximumPrice, uuid) VALUES (#[subscription.email], #[subscription.clientName], #[subscription.channel], #[subscription.favoriteBrand], #[subscription.minimumPrice], #[subscription.maximumPrice], #[subscription.uuid])]]></db:parameterized-query>
			</db:insert>
			<set-payload value="#[subscription.uuid]" doc:name="subscription.uuid" />
			<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
			<flow-ref name="Describe-Subscription" doc:name="Describe-Subscription" />
			<set-payload
				value="#[['to' : subscription.email , 'subject' : &quot;Confirm your subscription&quot; , 'content' : &quot;Email: &quot; + subscription.email + &quot;\n&quot; + payload]]"
				doc:name="Map (to, subject, content)" />
			<flow-ref name="Send-Mail" doc:name="Send-Mail" />
		</transactional>
		<set-payload value="#[subscription]" doc:name="subscription" />
	</sub-flow>
	<sub-flow name="Unsubscribe"
		doc:description="input.payload = Map|Subscription (email, uuid)
output.payload = Subscription|null">
		<set-variable variableName="subscription" value="#[payload]"
			doc:name="subscription = payload" />
		<set-payload value="#[subscription.uuid]" doc:name="subscription.uuid" />
		<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
		<choice doc:name="payload != null?">
			<when expression="#[payload != null]">
				<db:delete config-ref="MySQL_Configuration" doc:name="Delete subscription">
					<db:parameterized-query><![CDATA[DELETE FROM subscription WHERE email = #[subscription.email] AND uuid = #[subscription.uuid]]]></db:parameterized-query>
				</db:delete>
				<set-payload value="#[subscription.uuid]" doc:name="subscription.uuid" />
				<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
			</when>
			<otherwise>
				<set-payload value="#[false]" doc:name="false" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Get-HTTP-Params" doc:description="output.payload = Map">
		<choice doc:name="http.method">
			<when expression="#[message.inboundProperties.'http.method' == 'POST']">
				<set-payload value="#[payload]" doc:name="[POST] Map (...)" />
			</when>
			<when expression="#[message.inboundProperties.'http.method' == 'GET']">
				<set-payload value="#[message.inboundProperties.'http.query.params']"
					doc:name="[GET] Map (...)" />
			</when>
			<otherwise>
				<expression-component
					doc:name="throw new UnsupportedOperationException(http.method)"><![CDATA[throw new UnsupportedOperationException(message.inboundProperties.'http.method')]]></expression-component>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Email-Subscriptions"
		doc:description="input.payload = email
output.payload = boolean">
		<set-variable variableName="mail"
			value="#[['to' : payload , 'subject' : &quot;Subscription list&quot; , 'content' : &quot;Email: &quot; + payload + &quot;\n&quot;]]"
			doc:name="mail = Map (to, subject, content)" />
		<db:select config-ref="MySQL_Configuration" doc:name="Get subscriptions">
			<db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE email = #[payload]]]></db:parameterized-query>
		</db:select>
		<choice doc:name="not empty?">
			<when expression="#[!payload.isEmpty()]">
				<foreach doc:name="For Each">
					<flow-ref name="Describe-Subscription" doc:name="Describe-Subscription" />
					<expression-component doc:name="Append to mail.content"><![CDATA[mail.content += "\n" + payload]]></expression-component>
				</foreach>
				<set-payload value="#[mail]" doc:name="mail" />
				<flow-ref name="Send-Mail" doc:name="Send-Mail" />
				<set-payload value="#[true]" doc:name="true" />
			</when>
			<otherwise>
				<set-payload value="#[false]" doc:name="false" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Activate-Subscription"
		doc:description="input.payload = Map|Subscription (email, uuid)
output.payload = Subscription|null">
		<set-variable variableName="uuid" value="#[payload.uuid]"
			doc:name="uuid = payload.uuid" />
		<db:update config-ref="MySQL_Configuration" doc:name="Activate subscription">
			<db:parameterized-query><![CDATA[UPDATE subscription SET active = 1 WHERE email = #[payload.email] AND uuid = #[payload.uuid]]]></db:parameterized-query>
		</db:update>
		<set-payload value="#[uuid]" doc:name="uuid" />
		<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
	</sub-flow>
	<sub-flow name="Get-Subscription"
		doc:description="input.payload = uuid
output.payload = Subscription|null">
		<db:select config-ref="MySQL_Configuration" doc:name="Get subscription">
			<db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE uuid = #[payload]]]></db:parameterized-query>
		</db:select>
		<choice doc:name="empty?">
			<when expression="#[payload.isEmpty()]">
				<set-payload value="#[null]" doc:name="null" />
			</when>
			<otherwise>
				<set-payload value="#[payload[0]]" doc:name="payload[0]" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Object-To-Subscription">
		<json:object-to-json-transformer
			doc:name="to JSON" />
		<json:json-to-object-transformer
			returnClass="is.project3.subscriptions.Subscription" doc:name="JSON to Subscription" />
	</sub-flow>
	<sub-flow name="Describe-Subscription"
		doc:description="input.payload = Map|Subscription (email,favoriteBrand,minimumPrice,maximumPrice,uuid,active)
output.payload = String">
		<set-payload
			value="Favorite Brand: #[payload.favoriteBrand]#[&quot;\n&quot;]Minimum Price: #[payload.minimumPrice]#[&quot;\n&quot;]Maximum Price: #[payload.maximumPrice]#[&quot;\n&quot;]Unsubscribe link: http://localhost:8081/unsubscribe?email=#[payload.email]&amp;uuid=#[payload.uuid]#[&quot;\n&quot; + (payload.active ? '' : &quot;Activate link: http://localhost:8081/activate_subscription?email=&quot; + payload.email + &quot;&amp;uuid=&quot; + payload.uuid + &quot;\n&quot;)]"
			doc:name="Describe subscription" />
	</sub-flow>

	<sub-flow name="Send-Mail"
		doc:description="input.payload = Map (to,bc,bcc,replyto,subject,content)">
		<set-variable variableName="mail" value="#[payload]"
			doc:name="mail" />
		<set-payload value="#[mail.content]" doc:name="mail.content" />
		<smtps:outbound-endpoint host="smtp.dei.uc.pt"
			port="465" user="${smtp.user}" password="${smtp.password}" to="#[mail.to]"
			subject="#[mail.subject]" responseTimeout="10000" doc:name="Send mail"
			bcc="#[mail.bcc]" cc="#[mail.cc]" connector-ref="SMTP_Connector"
			from="${smtp.from}" replyTo="#[mail.replyto]" />
	</sub-flow>
	<flow name="Common-LoadSmartphones">
		<component class="is.project3.smartphones.tools.Validator"
			doc:name="Validator" />

		<choice tracking:enable-default-events="true" doc:name="Choice">
			<when expression="#[payload==null]">
				<set-payload value="Error!" doc:name="Set Payload" />
			</when>
			<otherwise>
				<mulexml:jaxb-xml-to-object-transformer
					encoding="UTF-8" jaxbContext-ref="JAXB_Context" doc:name="XML to JAXB Object" />
                <component class="is.project3.smartphones.tools.FilterScreenSize" doc:name="POJO-Filter"/>

				<set-session-variable variableName="timestamp"
					value="#[payload.getTimestamp().longValue()]" doc:name="Timestamp" />
				<set-session-variable variableName="version"
					value="#[payload.getVersion().longValue()]" doc:name="Version" />
				<set-session-variable variableName="crawler"
					value="#[payload.getCrawler()]" doc:name="Crawler" />
                <set-variable variableName="information" value="#[payload]" doc:name="Information"/>
                <transactional action="ALWAYS_BEGIN" doc:name="Transactional">
                    <db:delete config-ref="MySQL_Configuration" doc:name="Database">
                        <db:parameterized-query><![CDATA[DELETE FROM SMARTPHONE;]]></db:parameterized-query>
                    </db:delete>
                    <set-payload value="#[information]" doc:name="Set Payload"/>
                    <foreach collection="#[payload.getSmartphone()]" doc:name="For Each">
                        <db:insert config-ref="MySQL_Configuration" doc:name="Insert into Database">
                            <db:parameterized-query><![CDATA[INSERT INTO smartphone (VERSION, TIMESTAMP, CRAWLER, URL, TITLE, PRICE, PROCESSOR, SCREENTYPE, SCREENSIZE,OTHER) VALUES (#[sessionVars.version],#[sessionVars.timestamp],#[sessionVars.crawler], #[payload.url],#[payload.title],#[payload.price.value],#[payload.description.get(0).value],#[payload.description.get(1).value],#[payload.description.get(2).value],#[payload.description.get(3).value]);]]></db:parameterized-query>
                        </db:insert>
                    </foreach>
                </transactional>
                <set-payload value="success!" doc:name="Set Payload"/>

			</otherwise>
		</choice>
	</flow>
	<flow name="Directory-LoadSmartphones">
		<file:inbound-endpoint path="dropXMLdirectory"
			responseTimeout="10000" doc:name="File" />
		<file:file-to-string-transformer
			doc:name="File to String" encoding="UTF-8"/>
		<flow-ref name="Common-LoadSmartphones" doc:name="Common-LoadSmartphones" />
	</flow>
	<flow name="SOAP-LoadSmartphones">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/soap/loadxml" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="is.project3.smartphones.soap.LoadXML"
			doc:name="CXF" />
		<component doc:name="Java">
			<singleton-object class="is.project3.smartphones.soap.LoadXML" />
		</component>
		<flow-ref name="Common-LoadSmartphones" doc:name="Common-LoadSmartphones" />
	</flow>
    <flow name="SendDigest" initialState="started">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="1" timeUnit="DAYS"/>
            <db:select config-ref="MySQL_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[SELECT * FROM subscription]]></db:parameterized-query>
            </db:select>
        </poll>
        <choice doc:name="Choice">
            <when expression="#[payload.isEmpty]">
                <logger message="Subscription table is Empty" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <foreach collection="#[payload]" doc:name="For Each">
                    <set-variable variableName="email" value="#[payload.channel]" doc:name="Variable"/>
                    <db:select config-ref="MySQL_Configuration" doc:name="Database">
                        <db:parameterized-query><![CDATA[SELECT * FROM SMARTPHONE where SMARTPHONE.TITLE LIKE '%#[payload.favoriteBrand]%' AND SMARTPHONE.PRICE >= #[payload.minimumPrice]  AND SMARTPHONE.PRICE <= #[payload.maximumPrice];]]></db:parameterized-query>
                    </db:select>
                    <object-to-string-transformer doc:name="Object to String"/>

                </foreach>
            </otherwise>
        </choice>
    </flow>
</mule>
