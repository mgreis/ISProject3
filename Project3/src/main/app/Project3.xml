<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
	xmlns:ssl="http://www.mulesoft.org/schema/mule/ssl" xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers"
	xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/current/mule-twitter.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/ssl http://www.mulesoft.org/schema/mule/ssl/current/mule-ssl.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd">
	<http:listener-config name="HTTP_Listener_Configuration"
		host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration">
		<http:worker-threading-profile
			poolExhaustedAction="WAIT" />
	</http:listener-config>
	<mulexml:jaxb-context name="JAXB_Context"
		packageNames="is.project3.smartphones.xml" doc:name="JAXB Context" />
	<db:mysql-config name="MySQL_Configuration" host="localhost"
		port="3306" user="root" database="isproject3" doc:name="MySQL Configuration" />
	<smtps:connector name="SMTP_Connector"
		validateConnections="true" doc:name="SMTP">
		<smtps:tls-client path="keystore.jks" storePassword="123456" />
		<smtps:tls-trust-store path="truststore.jks"
			storePassword="123456" />
	</smtps:connector>
	<file:connector name="File" autoDelete="true" streaming="true"
		validateConnections="true" doc:name="File" />
	<smtp:gmail-connector name="Gmail"
		validateConnections="true" doc:name="Gmail" fromAddress="integracaosistemas15@gmail.com" />
	<twitter:config name="Twitter" consumerKey="1kgBDNqQnq3kEipcmNbQTYTet"
		consumerSecret="5az6IMW547bjeDXECnIGMUjIXrJKSeujN8jxCfQMnbc31MGnSS"
		doc:name="Twitter" accessKey="2882476084-MyopmqT7GuMMPrQ4YIhSvm1tZc15bDJ2zvvy5ut"
		accessSecret="Po6aY8wE5SUzld1o8KZEdnjBEUOEJWQuSQc3O0jDb5SFI
    " />
	<twitter:config name="Twitter1"
		accessKey="2882476084-MyopmqT7GuMMPrQ4YIhSvm1tZc15bDJ2zvvy5ut"
		accessSecret="Po6aY8wE5SUzld1o8KZEdnjBEUOEJWQuSQc3O0jDb5SFI"
		consumerKey="hSLwYPhuO75hJxeC81vMlPaYd" consumerSecret="YzU0z1xhMg5aaHEn8YdkD5YnrAoN5AfBFO2uSlrpJcyeAq4qdF"
		doc:name="Twitter" />
	<twitter:config name="Twitter__Configuration"
		accessKey="2882476084-MyopmqT7GuMMPrQ4YIhSvm1tZc15bDJ2zvvy5ut"
		accessSecret="Po6aY8wE5SUzld1o8KZEdnjBEUOEJWQuSQc3O0jDb5SFI"
		consumerKey="hSLwYPhuO75hJxeC81vMlPaYd" consumerSecret="YzU0z1xhMg5aaHEn8YdkD5YnrAoN5AfBFO2uSlrpJcyeAq4qdF"
		doc:name="Twitter: Configuration" />
	<smtp:gmail-connector name="Gmail1"
		validateConnections="true" doc:name="Gmail" />
	<ssl:connector name="SSL__TLS_" validateConnections="true"
		sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0"
		clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0"
		doc:name="SSL (TLS)">
		<ssl:client path="keystore.jks" storePassword="123456" />
		<ssl:key-store path="keystore.jks" keyPassword="123456"
			storePassword="123456" />
		<ssl:server path="truststore.jks" storePassword="123456" />
	</ssl:connector>
	<flow name="HTTP-CreateDatabase" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="create_database" doc:name="GET create_database" allowedMethods="GET" />
		<db:bulk-execute config-ref="MySQL_Configuration"
			doc:name="Create database" file="src/main/resources/create_database.sql"></db:bulk-execute>
		<set-payload value="Database created." doc:name="Database created."
			encoding="UTF-8" mimeType="text/plain" />
		<logger message="HTTP-CreateDatabase: #[payload]" level="INFO"
			doc:name="Logger" />
	</flow>
	<flow name="HTTP-Subscribe" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="subscribe" doc:name="POST subscribe" allowedMethods="POST" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<flow-ref name="Object-To-Subscription" doc:name="Object-To-Subscription" />
		<expression-component doc:name="payload.channel = 'Web'"><![CDATA[payload.channel = 'Web']]></expression-component>
		<flow-ref name="Subscribe" doc:name="Subscribe" />
		<logger message="HTTP-Subscribe: #[payload]" level="INFO"
			doc:name="Logger" />
	</flow>
	<flow name="HTTP-ActivateSubscription" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="activate_subscription" allowedMethods="GET"
			doc:name="GET activate_subscription" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<flow-ref name="Activate-Subscription" doc:name="Activate-Subscription" />
		<logger message="HTTP-ActivateSubscription: #[payload]" level="INFO"
			doc:name="Logger" />
	</flow>
	<flow name="HTTP-Unsubcribe" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="unsubscribe" allowedMethods="GET,POST" doc:name="GET|POST unsubscribe" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<flow-ref name="Unsubscribe" doc:name="Unsubscribe" />
		<logger message="HTTP-Unsubscribe: #[payload]" level="INFO"
			doc:name="Logger" />
	</flow>
	<flow name="HTTP-ConfirmUnsubscribe" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="confirm_unsubscribe" allowedMethods="GET" doc:name="GET confirm_unsubscribe" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<flow-ref name="Confirm-Unsubscribe" doc:name="Confirm-Unsubscribe" />
		<logger message="HTTP-ConfirmUnsubscribe: #[payload]" level="INFO"
			doc:name="Logger" />
	</flow>
	<flow name="HTTP-EmailSubscriptions" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="email_subscriptions" allowedMethods="POST" doc:name="POST email_subscriptions" />
		<flow-ref name="Get-HTTP-Params" doc:name="Get-HTTP-Params" />
		<set-payload value="#[payload.email]" doc:name="payload.email" />
		<flow-ref name="Email-Subscriptions" doc:name="Email-Subscriptions" />
		<logger message="HTTP-EmailSubscriptions: #[payload]" level="INFO"
			doc:name="Logger" />
	</flow>
	<flow name="HTTP-*" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="*" allowedMethods="GET" doc:name="GET *" />
		<http:static-resource-handler
			resourceBase="src/main/resources/www" defaultFile="index.html"
			doc:name="src/main/resources/www" />
		<logger message="HTTP-*: #[message.inboundProperties.'http.request.path']"
			level="INFO" doc:name="Logger" />
	</flow>
	<flow name="SOAP-SubscriptionService" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="subscription_service" doc:name="SOAP subscription_service" />
		<cxf:jaxws-service serviceClass="is.project3.subscriptions.SubscriptionService"
			validationEnabled="true" doc:name="Subscription Service" />
		<choice doc:name="(cxf_operation) subscribe? unsubscribe? email_subscriptions?">
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}subscribe&quot;).equals(cxf_operation)]">
				<set-payload
					value="#[[ 'channel' : 'SOAP' , 'email' : payload[0] , 'clientName' : payload[1] , 'favoriteBrand' : payload[2] , 'minimumPrice' : payload[3] , 'maximumPrice' : payload[4] ]]"
					doc:name="Map (channel = 'SOAP', email, clientName, favoriteBrand, minimumPrice, maximumPrice)" />
				<flow-ref name="Subscribe" doc:name="Subscribe" />
			</when>
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}unsubscribe&quot;).equals(cxf_operation)]">
				<set-payload value="#[[ 'id' : payload[0] , 'email' : payload[1] ]]"
					doc:name="Map (id, email)" />
				<flow-ref name="Unsubscribe" doc:name="Unsubscribe" />
			</when>
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}emailSubscriptions&quot;).equals(cxf_operation)]">
				<set-payload value="#[payload]" doc:name="payload/email" />
				<flow-ref name="Email-Subscriptions" doc:name="Email-Subscriptions" />
			</when>
			<otherwise>
				<set-payload value="Operation #[cxf_operation] is not supported."
					encoding="UTF-8" mimeType="text/plain"
					doc:name="Operation #[cxf_operation] is not supported." />
			</otherwise>
		</choice>
		<logger message="SOAP-SubscriptionService(#[cxf_operation]): #[payload]"
			level="INFO" doc:name="Logger" />
	</flow>
	<flow name="QUARTZ-RemoveInactiveSubscriptions" initialState="started">
		<quartz:inbound-endpoint responseTimeout="10000"
			doc:name="Every minute" jobName="RemoveInactiveSubscriptionsSchedule"
			repeatInterval="0" cronExpression="0 0/1 * 1/1 * ? *">
			<quartz:event-generator-job>
				<quartz:payload>quartzScheduler started</quartz:payload>
			</quartz:event-generator-job>
		</quartz:inbound-endpoint>
		<db:delete config-ref="MySQL_Configuration"
			doc:name="Remove subscriptions that are inactive and were created an hour ago">
			<db:parameterized-query><![CDATA[DELETE FROM subscription WHERE active = 0 AND NOW() >= DATE_ADD(created, INTERVAL 1 HOUR)]]></db:parameterized-query>
		</db:delete>
		<logger message="QUARTZ-RemoveInactiveSubscriptions: #[payload]"
			level="INFO" doc:name="Logger" />
	</flow>
	<sub-flow name="Subscribe">
		<flow-ref name="Object-To-Subscription" doc:name="Object-To-Subscription" />
		<set-variable variableName="subscription" value="#[payload]"
			doc:name="subscription = payload" />
		<db:select config-ref="MySQL_Configuration"
			doc:name="Get subscription (email, favoriteBrand, minimumPrice, maximumPrice)">
			<db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE email = #[subscription.email] AND favoriteBrand = #[subscription.favoriteBrand] AND minimumPrice = #[subscription.minimumPrice] AND maximumPrice = #[subscription.maximumPrice] LIMIT 1]]></db:parameterized-query>
		</db:select>
		<choice doc:name="empty?">
			<when expression="#[payload.isEmpty()]">
				<set-payload value="#[subscription]" doc:name="subscription" />
				<validation:all doc:name="validate">
					<validation:validations>
						<validation:custom-validator
							class="is.project3.subscriptions.PriceRangeValidator" />
						<validation:is-email email="#[payload.email]"
							message="Not a valid email." />
						<validation:is-not-empty value="#[payload.clientName]"
							message="Client name is empty." />
						<validation:is-not-empty value="#[payload.favoriteBrand]"
							message="Favorite brand is empty." />
						<validation:is-not-empty value="#[payload.channel]"
							message="Channel was not defined." />
						<validation:is-not-empty value="#[payload.email]"
							message="Email is empty." />
						<validation:is-not-null value="#[payload.minimumPrice]"
							message="Minimum price is null." />
						<validation:is-not-null value="#[payload.maximumPrice]"
							message="Maximum price is null." />
						<validation:is-number value="#[payload.maximumPrice]"
							minValue="0" numberType="DOUBLE" message="Maximum price is negative." />
						<validation:is-number value="#[payload.minimumPrice]"
							minValue="0" numberType="DOUBLE" message="Minimum price is negative." />
					</validation:validations>
				</validation:all>
				<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
					<db:insert config-ref="MySQL_Configuration"
						autoGeneratedKeys="true"
						doc:name="Insert subscription (email, clientName, channel, favoriteBrand, minimumPrice, maximumPrice)">
						<db:parameterized-query><![CDATA[INSERT INTO subscription (email, clientName, channel, favoriteBrand, minimumPrice, maximumPrice) VALUES (#[subscription.email], #[subscription.clientName], #[subscription.channel], #[subscription.favoriteBrand], #[subscription.minimumPrice], #[subscription.maximumPrice])]]></db:parameterized-query>
					</db:insert>
					<db:select config-ref="MySQL_Configuration" doc:name="Get subscription (id)">
						<db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE id = #[payload[0].GENERATED_KEY]]]></db:parameterized-query>
					</db:select>
					<set-payload value="#[payload[0]]" doc:name="payload[0]" />
					<flow-ref name="Object-To-Subscription" doc:name="Object-To-Subscription" />
					<set-variable variableName="subscription" value="#[payload]"
						doc:name="subscription = payload" />
					<set-payload
						value="#[[ 'data' : payload , 'activate_subscription' : true ]]"
						doc:name="Map (data, activate_subscription)" />
					<flow-ref name="Describe-Subscription" doc:name="Describe-Subscription" />
					<set-payload
						value="#[['to' : subscription.email , 'subject' : &quot;Activate your subscription&quot; , 'content' : payload]]"
						doc:name="Map (to, subject, content)" />
					<flow-ref name="Send-Mail" doc:name="Send-Mail" />
				</transactional>
				<set-payload
					value="A mail was sent with an activation link to start receiving daily digests. The subscription will be forgotten after one hour if it is not activated."
					encoding="UTF-8" mimeType="text/plain"
					doc:name="A mail was sent with an activation link to start receiving daily digests. The subscription will be forgotten after one hour if it is not activated." />
			</when>
			<otherwise>
				<set-payload value="The subscription already exists."
					encoding="UTF-8" mimeType="text/plain" doc:name="The subscription already exists." />
			</otherwise>
		</choice>

	</sub-flow>
	<sub-flow name="Activate-Subscription"
		doc:description="input.payload = Map|Subscription (email, uuid)
output.payload = Subscription|null">
		<set-variable variableName="params" value="#[payload]"
			doc:name="params = payload" />
		<validation:all doc:name="Map (id, email, signature)">
			<validation:validations>
				<validation:is-email email="#[params.email]"
					message="Invalid email." />
				<validation:is-not-empty value="#[params.signature]"
					message="Missing signature." />
				<validation:is-number value="#[params.id]"
					numberType="LONG" message="Invalid id." />
			</validation:validations>
		</validation:all>
		<expression-filter
			expression="#[payload.id != null &amp;&amp; payload.email != null &amp;&amp; payload.signature != null]"
			doc:name="Map (id, email, signature)" />
		<db:select config-ref="MySQL_Configuration"
			doc:name="Get subscription (id, email, active=0)">
            <db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE id = #[params.id] AND email = #[params.email] AND active = 0 LIMIT 1]]></db:parameterized-query>

		</db:select>
		<choice doc:name="empty?">
			<when expression="#[payload.isEmpty()]">
				<set-payload value="Subscription not found or already active."
					encoding="UTF-8" mimeType="text/plain"
					doc:name="Subscription not found or already active." />
			</when>
			<otherwise>
				<set-payload value="#[payload[0]]" doc:name="payload[0]" />
				<flow-ref name="Digest-Subscription" doc:name="Digest-Subscription" />
				<choice doc:name="payload == params.signature?">
					<when expression="#[payload == params.signature]">
						<db:update config-ref="MySQL_Configuration" doc:name="Activate subscription">
							<db:parameterized-query><![CDATA[UPDATE subscription SET active = 1 WHERE id = #[params.id] AND email = #[params.email]]]></db:parameterized-query>
						</db:update>
						<set-payload
							value="Subscription activated, email will start receiving smartphones that match the subscription."
							encoding="UTF-8" mimeType="text/plain"
							doc:name="Subscription activated, email will start receiving smartphones that match the subscription." />
					</when>
					<otherwise>
						<set-payload value="Signature is not valid." encoding="UTF-8"
							mimeType="text/plain" doc:name="Signature is not valid." />
					</otherwise>
				</choice>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Unsubscribe"
		doc:description="input.payload = Map (email, id, signature)
output.payload = Subscription|null|false">
		<set-variable variableName="params" value="#[payload]"
			doc:name="params = payload" />
		<validation:all doc:name="Map (id, email)">
			<validation:validations>
				<validation:is-email email="#[params.email]"
					message="Not a valid email." />
				<validation:is-number value="#[params.id]"
					numberType="LONG" message="Invalid id." />
			</validation:validations>
		</validation:all>
		<db:select config-ref="MySQL_Configuration" doc:name="Get subscription (id, email)">
            <db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE id = #[params.id] AND email = #[params.email] LIMIT 1]]></db:parameterized-query>

		</db:select>
		<choice doc:name="isEmpty?">
			<when expression="#[payload.isEmpty()]">
				<set-payload value="Subscription not found." encoding="UTF-8"
					mimeType="text/plain" doc:name="Subscription not found." />
			</when>
			<otherwise>
				<set-payload value="#[payload[0]]" doc:name="payload[0]" />
				<flow-ref name="Object-To-Subscription" doc:name="Object-To-Subscription" />
				<set-variable variableName="subscription" value="#[payload]"
					doc:name="subscription = payload" />
				<set-payload
					value="#[[ 'data' : payload , 'confirm_unsubscribe' : true ]]"
					doc:name="Map (data, confirm_unsubscribe)" />
				<flow-ref name="Describe-Subscription" doc:name="Describe-Subscription" />
				<set-payload
					value="#[['to' : subscription.email , 'subject' : &quot;Confirm unsubscribe&quot; , 'content' :  payload]]"
					doc:name="Map (to, subject, content)" />
				<flow-ref name="Send-Mail" doc:name="Send-Mail" />
				<set-payload value="A confirmation mail was sent to #[params.email]."
					encoding="UTF-8" mimeType="text/plain"
					doc:name="A confirmation mail was sent to #[params.email]." />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Confirm-Unsubscribe">
		<expression-filter
			expression="#[payload.id != null &amp;&amp; payload.email != null &amp;&amp; payload.signature != null]"
			doc:name="Map (id, email, signature)" />
		<set-variable variableName="params" value="#[payload]"
			doc:name="params = payload" />
		<db:select config-ref="MySQL_Configuration" doc:name="Get subscription (id, email)">
			<db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE id = #[params.id] AND email = #[params.email] LIMIT 1]]></db:parameterized-query>
		</db:select>
		<choice doc:name="empty?">
			<when expression="#[payload.isEmpty()]">
				<set-payload value="Subscription not found." doc:name="Subscription not found."
					encoding="UTF-8" mimeType="text/plain" />
			</when>
			<otherwise>
				<set-payload value="#[payload[0]]" doc:name="payload[0]" />
				<flow-ref name="Digest-Subscription" doc:name="Digest-Subscription" />
				<choice doc:name="payload == params.signature?">
					<when expression="#[payload == params.signature]">
						<db:delete config-ref="MySQL_Configuration" doc:name="Delete subscription (id)">
							<db:parameterized-query><![CDATA[DELETE FROM subscription WHERE id = #[params.id]]]></db:parameterized-query>
						</db:delete>
						<set-payload value="The subscription was deleted."
							encoding="UTF-8" mimeType="text/plain" doc:name="The subscription was deleted." />
					</when>
					<otherwise>
						<set-payload value="Signature is not valid." encoding="UTF-8"
							mimeType="text/plain" doc:name="Signature is not valid." />
					</otherwise>
				</choice>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Email-Subscriptions"
		doc:description="input.payload = email
output.payload = boolean">
		<validation:is-email email="#[payload]" doc:name="payload is email" />
		<set-variable variableName="mail"
			value="#[['to' : payload , 'subject' : &quot;Subscription list&quot; , 'content' : &quot;This mail contains a list of all the subscriptions for &quot; + payload + &quot;:\n&quot;]]"
			doc:name="mail = Map (to, subject, content)" />
		<db:select config-ref="MySQL_Configuration" doc:name="Get subscriptions">
			<db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE email = #[payload]]]></db:parameterized-query>
		</db:select>
		<choice doc:name="not empty?">
			<when expression="#[!payload.isEmpty()]">
				<foreach doc:name="For Each">
					<flow-ref name="Object-To-Subscription" doc:name="Object-To-Subscription" />
					<choice doc:name="payload.active == 0?">
						<when expression="#[payload.active == 0]">
							<set-payload
								value="#[[ 'data' : payload , 'activate_subscription' : true ]]"
								doc:name="Map (data, activate_subscription)" />
						</when>
						<otherwise>
							<set-payload value="#[[ 'data' : payload , 'unsubscribe' : true ]]"
								doc:name="Map (data, unsubscribe)" />
						</otherwise>
					</choice>
					<flow-ref name="Describe-Subscription" doc:name="Describe-Subscription" />
					<expression-component doc:name="Append to mail.content"><![CDATA[mail.content += "\n" + payload]]></expression-component>
				</foreach>
				<set-payload value="#[mail]" doc:name="mail" />
				<flow-ref name="Send-Mail" doc:name="Send-Mail" />
			</when>
			<otherwise>
				<set-payload value="The subscription does not exist."
					encoding="UTF-8" mimeType="text/plain" doc:name="The subscription does not exist." />
			</otherwise>
		</choice>
		<set-payload
			value="A mail was sent to #[mail.to] only if the email had subscriptions. No further feedback is given here to protect the subscriber's privacy."
			doc:name="A mail was sent to #[mail.to] only if the email had subscriptions. No further feedback is given here to protect the subscriber's privacy." />
	</sub-flow>
	<sub-flow name="Get-HTTP-Params" doc:description="output.payload = Map">
		<choice doc:name="http.method">
			<when expression="#[message.inboundProperties.'http.method' == 'POST']">
				<set-payload value="#[payload]" doc:name="[POST] Map (...)" />
			</when>
			<when expression="#[message.inboundProperties.'http.method' == 'GET']">
				<set-payload value="#[message.inboundProperties.'http.query.params']"
					doc:name="[GET] Map (...)" />
			</when>
			<otherwise>
				<scripting:component
					doc:name="UnsupportedOperationException(&quot;I don't know how to get params from HTTP &quot; + http.method + &quot;.&quot;);">
					<scripting:script engine="Groovy"><![CDATA[throw new UnsupportedOperationException("I don't know how to get params from HTTP " + message.getInboundProperty('http.method') + ".");]]></scripting:script>
				</scripting:component>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Describe-Subscription"
		doc:description="input.payload = Subscription
output.payload = String">
		<expression-filter
			expression="#[payload.data is is.project3.subscriptions.Subscription]"
			doc:name="Map (data -&gt; Subscription, activate_subscription?, unsubscribe? confirm_subscribe?" />
		<set-variable variableName="describe" value="#[payload]"
			doc:name="describe = payload" />
		<set-payload value="#[describe.data]" doc:name="describe.data" />
		<flow-ref name="Digest-Subscription" doc:name="Digest-Subscription" />
		<parse-template location="template/describe-subscription.txt"
			doc:name="Template describe-subscription" />
		<set-payload value="#[payload]" encoding="UTF-8" mimeType="text/plain"
			doc:name="payload" />
		<logger message="Describe-Subscription: #[payload]" level="INFO"
			doc:name="Logger" />
	</sub-flow>
	<sub-flow name="Digest-Subscription">
		<flow-ref name="Object-To-Subscription" doc:name="Object-To-Subscription" />
		<object-to-byte-array-transformer
			doc:name="Object to Byte Array" />
		<custom-transformer class="is.project3.transformer.DigestTransformer"
			doc:name="Digest(SHA-1)">
			<spring:property name="algorithm" value="SHA-1" />
		</custom-transformer>
	</sub-flow>
	<sub-flow name="Signature-BAD?">
		<payload-type-filter expectedType="is.project3.subscriptions.Subscription"
			doc:name="Subscription" />
		<object-to-byte-array-transformer
			doc:name="Object to Byte Array" />
		<custom-transformer class="is.project3.transformer.SignatureTransformer"
			doc:name="Signature(payload)">
			<spring:property name="sslConnectorName" value="SSL__TLS_" />
			<spring:property name="keyAlias" value="localhost" />
		</custom-transformer>
		<custom-transformer
			class="is.project3.transformer.ByteArrayToHexStringTransformer"
			doc:name="Byte Array to Hex String" />
	</sub-flow>
	<sub-flow name="Verify-Signature-BAD?">
		<expression-filter
			expression="#[payload.data is is.project3.subscriptions.Subscription &amp;&amp; payload.signature != null]"
			doc:name="Map (data -&gt; Subscription, signature)" />
		<set-variable variableName="data" value="#[payload.data]"
			doc:name="data = payload.data" />
		<set-payload value="#[payload.signature]" doc:name="payload.signature" />
		<custom-transformer
			class="is.project3.transformer.HexStringToByteArrayTransformer"
			doc:name="Hex String To Byte Array" />
		<set-variable variableName="signature" value="payload"
			doc:name="signature = payload" />
		<set-payload value="#[data]" doc:name="data" />
		<object-to-byte-array-transformer
			doc:name="Object to Byte Array" />
		<custom-transformer
			class="is.project3.transformer.VerifySignatureTransformer" doc:name="VerifySignature(payload)">
			<spring:property name="sslConnectorName" value="SSL__TLS_" />
			<spring:property name="keyAlias" value="localhost" />
			<spring:property name="signature" value="#[signarute]" />
		</custom-transformer>
	</sub-flow>
	<sub-flow name="Object-To-Subscription">
		<json:object-to-json-transformer
			doc:name="to JSON" />
		<json:json-to-object-transformer
			returnClass="is.project3.subscriptions.Subscription" doc:name="JSON to Subscription" />
	</sub-flow>
	<sub-flow name="Send-Mail">
		<choice doc:name="(${smtp.provider}) dei? gmail?">
			<when expression="#[&quot;${smtp.provider}&quot; == &quot;dei&quot;]">
				<flow-ref name="Send-Mail-DEI" doc:name="Send-Mail-DEI" />
			</when>
			<when expression="#[&quot;${smtp.provider}&quot; == &quot;gmail&quot;]">
				<flow-ref name="Send-Mail-GMAIL" doc:name="Send-Mail-GMAIL" />
			</when>
		</choice>
		<db:update config-ref="MySQL_Configuration" doc:name="update # emails">
			<db:parameterized-query><![CDATA[UPDATE `statistics` SET NUMBEROF = NUMBEROF+1 WHERE `FIELD` = 'EMAILS']]></db:parameterized-query>
		</db:update>
		<flow-ref name="twitter" doc:name="twitter" />
	</sub-flow>

	<sub-flow name="Send-Mail-DEI"
		doc:description="input.payload = Map (to,bc,bcc,replyto,subject,content)">
		<set-variable variableName="mail" value="#[payload]"
			doc:name="mail" />
		<set-payload value="#[mail.content]" doc:name="mail.content" />
		<smtps:outbound-endpoint host="smtp.dei.uc.pt"
			port="465" user="${smtp.user}" password="${smtp.password}" to="#[mail.to]"
			subject="#[mail.subject]" responseTimeout="10000" doc:name="Send mail"
			bcc="#[mail.bcc]" cc="#[mail.cc]" connector-ref="SMTP_Connector"
			from="${smtp.from}" replyTo="#[mail.replyto]" />
        <logger message="Send-Mail-DEI: #[mail.to]" level="INFO" doc:name="Logger"/>
	</sub-flow>
	<sub-flow name="Send-Mail-GMAIL">
		<set-variable variableName="mail" value="#[payload]"
			doc:name="mail" />
		<set-payload value="#[mail.content]" doc:name="mail.content"
			encoding="UTF-8" />
		<smtp:outbound-endpoint host="smtp.gmail.com"
			port="587" user="integracaosistemas15" password="sistemas15"
			connector-ref="Gmail" to="#[mail.to]" from="integracaosistemas15@gmail.com"
			subject="#[mail.subject]" cc="#[mail.cc]" bcc="#[mail.bcc]" replyTo="#[mail.replyto]"
			responseTimeout="10000" doc:name="Send mail" />
        <logger message="Send-Mail-GMAIL: #[mail.to]" level="INFO" doc:name="Logger"/>
	</sub-flow>
	<flow name="Common-LoadSmartphones">
		<component class="is.project3.smartphones.tools.Validator"
			doc:name="Validator" />
		<choice tracking:enable-default-events="true"
			doc:name="If it is not validated do nothing else put in database">
			<when expression="#[payload==null]">
				<set-payload value="Error!" doc:name="Set Payload" />
                <logger message="LoadSmartphones: Error" level="INFO" doc:name="Logger"/>
			</when>
			<otherwise>
				<mulexml:jaxb-xml-to-object-transformer
					encoding="UTF-8" jaxbContext-ref="JAXB_Context" doc:name="XML to JAXB Object" />
				<component class="is.project3.smartphones.tools.FilterScreenSize"
					doc:name="POJO-Filter" />
				<set-variable variableName="numberOfSmartphones"
					value="#[payload.getSmartphone().size()]" doc:name="NUMBER OF SMARTPHONES" />
				<set-session-variable variableName="timestamp"
					value="#[payload.getTimestamp().longValue()]" doc:name="Timestamp" />
				<set-session-variable variableName="version"
					value="#[payload.getVersion().longValue()]" doc:name="Version" />
				<set-session-variable variableName="crawler"
					value="#[payload.getCrawler()]" doc:name="Crawler" />
				<set-variable variableName="information" value="#[payload]"
					doc:name="Information" />
				<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
					<db:delete config-ref="MySQL_Configuration" doc:name="DeleteFromDatabase">
						<db:parameterized-query><![CDATA[DELETE FROM SMARTPHONE;]]></db:parameterized-query>
					</db:delete>
					<set-payload value="#[information]" doc:name="Set Payload" />
					<foreach collection="#[payload.getSmartphone()]" doc:name="For Each">
						<db:insert config-ref="MySQL_Configuration" doc:name="Insert into Database">
							<db:parameterized-query><![CDATA[INSERT INTO smartphone (VERSION, TIMESTAMP, CRAWLER, URL, TITLE, PRICE, PROCESSOR, SCREENTYPE, SCREENSIZE,OTHER) VALUES (#[sessionVars.version],#[sessionVars.timestamp],#[sessionVars.crawler], #[payload.url],#[payload.title],#[payload.price.value],#[payload.description.get(0).value],#[payload.description.get(1).value],#[payload.description.get(2).value],#[payload.description.get(3).value]);]]></db:parameterized-query>
						</db:insert>
					</foreach>
				</transactional>
				<db:update config-ref="MySQL_Configuration" doc:name="updateNumberOfSmartphones">
					<db:parameterized-query><![CDATA[UPDATE `statistics` SET NUMBEROF= #[numberOfSmartphones] WHERE `FIELD` = 'SMARTPHONES']]></db:parameterized-query>
				</db:update>
				<db:update config-ref="MySQL_Configuration" doc:name="updateUpdates">
					<db:parameterized-query><![CDATA[UPDATE `statistics` SET NUMBEROF = NUMBEROF+1 WHERE `FIELD` = 'UPDATES']]></db:parameterized-query>
				</db:update>
				<flow-ref name="twitter" doc:name="twitter" />
				<set-payload value="Success" doc:name="Set Payload" />
                <logger message="LoadSmartphones: #[payload]" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>

	</flow>
	<flow name="Directory-LoadSmartphones">
		<file:inbound-endpoint path="dropXMLdirectory"
			responseTimeout="10000" doc:name="File" />
		<file:file-to-string-transformer
			doc:name="File to String" encoding="UTF-8" />
		<flow-ref name="Common-LoadSmartphones" doc:name="Common-LoadSmartphones" />
	</flow>
	<flow name="SOAP-LoadSmartphones">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/soap/loadxml" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="is.project3.smartphones.soap.LoadXML"
			doc:name="CXF" />
		<component doc:name="Webservice class">
			<singleton-object class="is.project3.smartphones.soap.LoadXML" />
		</component>
		<flow-ref name="Common-LoadSmartphones" doc:name="Common-LoadSmartphones" />
	</flow>
	<flow name="SendDigest" initialState="started">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="1"
				timeUnit="DAYS" />
			<db:select config-ref="MySQL_Configuration" doc:name="Select Subscriptions">
                <db:parameterized-query><![CDATA[SELECT * FROM subscription where active = 1]]></db:parameterized-query>

			</db:select>
		</poll>
		<choice doc:name="No subscribers stop">
			<when expression="#[payload.isEmpty]">
				<logger message="SendDigest: Subscription table is Empty" level="INFO"
					doc:name="Logger" />
			</when>
			<otherwise>
				<foreach collection="#[payload]" doc:name="For Each">

					<set-variable variableName="email" value="#[payload.email]"
						doc:name="get Email" />
					<set-variable variableName="brand" value="#[payload.favoriteBrand]"
						doc:name="get Brand" />

                    <set-variable variableName="query" value="SELECT * FROM SMARTPHONE where SMARTPHONE.TITLE LIKE '%#[payload.favoriteBrand]%' AND SMARTPHONE.PRICE &gt;= #[payload.minimumPrice]  AND SMARTPHONE.PRICE &lt;= #[payload.maximumPrice]" doc:name="build Query"/>

					<db:select config-ref="MySQL_Configuration"
						doc:name="Select Smartphones that satisfy subscription">
                        <db:dynamic-query><![CDATA[#[query]]]></db:dynamic-query>


					</db:select>
                    <set-variable variableName="emailMessage" value="" doc:name="emailMessage"/>
                    <foreach doc:name="For Each">
                        <set-payload value="#[emailMessage+&quot;\n&quot;+payload.title+&quot; \nPrice: &quot;+payload.price+&quot; \nProcessor: &quot;+payload.processor+&quot; \nScreen Type: &quot;+payload.screentype+&quot;\nScreen Size: &quot;+payload.screensize+&quot;\nOther: &quot;+payload.other+&quot;\n\n&quot;]" encoding="UTF-8" doc:name="Set Payload"/>
                        <set-variable variableName="emailMessage" value="#[payload]" doc:name="Variable"/>
                    </foreach>
                    <set-payload value="#[['to' : email , 'subject' : &quot;Your daily digest for &quot;+brand , 'content' : emailMessage]]" encoding="UTF-8" doc:name="Set Payload"/>
                    <flow-ref name="Send-Mail" doc:name="Send-Mail"/>


				</foreach>
			</otherwise>
		</choice>
	</flow>
	<flow name="twitter">
		<db:update config-ref="MySQL_Configuration" doc:name="Update # Twitts">
			<db:parameterized-query><![CDATA[UPDATE statistics SET NUMBEROF = NUMBEROF+1 WHERE `FIELD` = 'TWITTS']]></db:parameterized-query>
		</db:update>
		<db:select config-ref="MySQL_Configuration" doc:name="Select Statistics">
			<db:parameterized-query><![CDATA[SELECT * FROM STATISTICS]]></db:parameterized-query>
		</db:select>
		<logger message="#[payload.size()]" level="INFO" doc:name="Logger" />
		<twitter:update-status config-ref="Twitter__Configuration"
			status="#[&quot;Our system has been updated: \n&quot; + payload.get(0).FIELD+&quot;:&quot;+payload.get(0).NUMBEROF + &quot;\n&quot;+ payload.get(1).FIELD+&quot;:&quot;+payload.get(1).NUMBEROF + &quot;\n&quot;+ payload.get(2).FIELD+&quot;:&quot;+payload.get(2).NUMBEROF + &quot;\n&quot;+ payload.get(3).FIELD+&quot;:&quot;+payload.get(3).NUMBEROF + &quot;\n&quot;]"
			doc:name="Twitter" />
        <logger message="Send Twitter: success" level="INFO" doc:name="Logger"/>
	</flow>
    <flow name="SOAP-Statistics" initialState="started">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/statistics" doc:name="HTTP"/>
        <cxf:jaxws-service serviceClass="is.project3.statistics.soap.LoadStatistics" doc:name="CXF"/>
        <component doc:name="Java">
            <singleton-object class="is.project3.statistics.soap.LoadStatistics"/>
        </component>
        <db:select config-ref="MySQL_Configuration" doc:name="Select Statistics">
            <db:parameterized-query><![CDATA[SELECT * FROM STATISTICS]]></db:parameterized-query>
        </db:select>
        <set-payload value="#[&quot;System Statistics: \n&quot; + payload.get(0).FIELD+&quot;:&quot;+payload.get(0).NUMBEROF + &quot;\n&quot;+ payload.get(1).FIELD+&quot;:&quot;+payload.get(1).NUMBEROF + &quot;\n&quot;+ payload.get(2).FIELD+&quot;:&quot;+payload.get(2).NUMBEROF + &quot;\n&quot;+ payload.get(3).FIELD+&quot;:&quot;+payload.get(3).NUMBEROF + &quot;\n&quot;]" doc:name="Set Payload"/>
        <logger message="Statistics: success" level="INFO" doc:name="Logger"/>
    </flow>

</mule>
