<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	<http:listener-config name="HTTP_Listener_Configuration"
		host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration">
		<http:worker-threading-profile
			poolExhaustedAction="WAIT" />
	</http:listener-config>
	<mulexml:jaxb-context name="JAXB_Context"
		packageNames="is.project3.smartphones.xml" doc:name="JAXB Context" />
	<db:mysql-config name="MySQL_Configuration" host="localhost"
		port="3306" user="root" database="isproject3" doc:name="MySQL Configuration" />
	<smtps:connector name="SMTP_Connector" fromAddress="${smtp.user}@student.dei.uc.pt"
		validateConnections="true" doc:name="SMTP">
		<smtps:tls-client path="keystore.jks" storePassword="123456" />
		<smtps:tls-trust-store path="truststore.jks"
			storePassword="123456" />
	</smtps:connector>
    <file:connector name="File" autoDelete="true" streaming="true" validateConnections="true" doc:name="File"/>
    <smtp:gmail-connector name="Gmail" validateConnections="true" doc:name="Gmail"/>
	<flow name="HTTP-CreateDatabase" initialState="stopped">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="create_database" doc:name="create_database" />
		<db:bulk-execute config-ref="MySQL_Configuration"
			doc:name="Create database" file="src/main/resources/create_database.sql"></db:bulk-execute>
		<set-payload value="Database created." doc:name="Database created."
			encoding="UTF-8" mimeType="text/plain" />
	</flow>
	<flow name="HTTP-Subscribe" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="subscribe" doc:name="POST subscribe" allowedMethods="POST" />
		<set-payload
			value="#[[ 'channel' : 'Web', 'email' : payload.email , 'clientName' : payload.clientName , 'favoriteBrand' : payload.favoriteBrand , 'minimumPrice' : payload.minimumPrice , 'maximumPrice' : payload.maximumPrice ]]"
			doc:name="subscription" />
		<flow-ref name="Subscribe" doc:name="Subscribe" />
		<set-payload
			value="A mail was sent, click the confirmation link to start receiving smartphone updates."
			encoding="UTF-8" mimeType="text/plain"
			doc:name="A mail was sent, click the confirmation link to start receiving smartphone updates." />
	</flow>
	<flow name="HTTP-Unsubcribe" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="unsubscribe" allowedMethods="POST" doc:name="POST unsubscribe" />
		<set-payload value="#[message.inboundProperties.'http.query.params'.email]"
			doc:name="email" />
		<flow-ref name="Unsubscribe" doc:name="Unsubscribe" />
		<set-payload value="The email will not receive smartphone updates."
			encoding="UTF-8" mimeType="text/plain"
			doc:name="The email will not receive smartphone updates." />
	</flow>
	<flow name="HTTP-ConfirmSubscription" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="confirm_subscription" doc:name="confirm_subscription" />
		<set-payload value="#[message.inboundProperties.'http.query.params'.email]"
			doc:name="email" />
		<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
		<choice doc:name="Choice">
			<when expression="#[payload == null]">
				<set-payload value="Subscription not found." encoding="UTF-8"
					mimeType="text/plain" doc:name="Subscription not found." />
			</when>
			<when
				expression="#[payload != null &amp;&amp; payload.hash() != message.inboundProperties.'http.query.params'.hash]">
				<set-payload value="Invalid hash." encoding="UTF-8"
					mimeType="text/plain" doc:name="Invalid hash." />
			</when>
			<otherwise>
				<flow-ref name="Validate-Subscription" doc:name="Validate-Subscription" />
				<set-payload
					value="Subscription validated, email will start receiving smartphone updates."
					encoding="UTF-8" mimeType="text/plain"
					doc:name="Subscription validated, email will start receiving smartphone updates." />
			</otherwise>
		</choice>
	</flow>
	<flow name="HTTP-*" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="*" doc:name="*" />
		<http:static-resource-handler
			resourceBase="src/main/resources/www" defaultFile="index.html"
			doc:name="src/main/resources/www" />
	</flow>
	<flow name="SOAP-SubscriptionService" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="subscription_service" doc:name="subscription_service" />
		<cxf:jaxws-service serviceClass="is.project3.subscriptions.SubscriptionService"
			doc:name="Subscription Service" />
		<choice doc:name="operation">
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}unsubscribe&quot;).equals(flowVars['cxf_operation'])]">
				<set-payload value="#[payload]" doc:name="email" />
				<flow-ref name="Unsubscribe" doc:name="Unsubscribe" />
				<set-payload value="#[payload == null]" doc:name="Return boolean" />
			</when>
			<when
				expression="#[javax.xml.namespace.QName.valueOf(&quot;{http://subscriptions.project3.is/}subscribe&quot;).equals(flowVars['cxf_operation'])]">
				<set-payload
					value="#[[ 'channel' : 'SOAP' , 'email' : payload[0] , 'clientName' : payload[1] , 'favoriteBrand' : payload[2] , 'minimumPrice' : payload[3] , 'maximumPrice' : payload[4] ]]"
					doc:name="subscription" />
				<flow-ref name="Subscribe" doc:name="Subscribe" />
				<set-payload value="#[payload != null]" doc:name="Return boolean" />
			</when>
			<otherwise>
				<set-payload value="#[null]" doc:name="null" />
			</otherwise>
		</choice>
	</flow>
	<sub-flow name="Subscribe"
		doc:description="input.payload = Map | Subscription
output.payload = Subscription">
        <set-variable variableName="subscription" value="#[payload]" doc:name="subscription" doc:description="Expects is.project3.subscriptions.Subscription"/>

		<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
			<db:delete config-ref="MySQL_Configuration" doc:name="Delete subscription">
                <db:parameterized-query><![CDATA[DELETE FROM subscription WHERE email = #[subscription.email]]]></db:parameterized-query>

			</db:delete>
			<db:insert config-ref="MySQL_Configuration"
				autoGeneratedKeys="true" autoGeneratedKeysColumnNames="id"
				doc:name="Insert subscription">
                <db:parameterized-query><![CDATA[INSERT INTO subscription (email, clientName, channel, favoriteBrand, minimumPrice, maximumPrice, validated) VALUES (#[subscription.email], #[subscription.clientName], #[subscription.channel], #[subscription.favoriteBrand], #[subscription.minimumPrice], #[subscription.maximumPrice], 0)]]></db:parameterized-query>

			</db:insert>
			<set-payload value="#[subscription.email]" doc:name="subscription.email" />
			<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
			<set-variable variableName="subscription" value="#[payload]"
				doc:name="subscription" doc:description="Expects is.project3.subscriptions.Subscription" />
			<set-payload
				value="#[['to' : payload.email , 'subject' : &quot;Confirm your subscription&quot; , 'content' : &quot;Email: &quot; + payload.email + &quot;\nFavorite Brand: &quot;+ payload.favoriteBrand + &quot;\nMinimum Price: &quot;+ payload.minimumPrice +&quot;\nMaximum price: &quot; + payload.maximumPrice + &quot;\n\nClick here to confirm your subscription: http://localhost:8081/confirm_subscription?email=&quot; + payload.email + &quot;&amp;hash=&quot; + payload.hash()]]"
				doc:name="mail" />
			<flow-ref name="Send-Mail" doc:name="Send-Mail" />
		</transactional>
		<set-payload value="#[subscription]" doc:name="subscription" />
	</sub-flow>
	<sub-flow name="Unsubscribe"
		doc:description="input.payload = email
output.payload = Subscription | null">
		<set-variable variableName="email" value="#[payload]"
			doc:name="email" />
		<db:delete config-ref="MySQL_Configuration" doc:name="Delete subscription">
			<db:parameterized-query><![CDATA[DELETE FROM subscription WHERE email = #[payload]]]></db:parameterized-query>
		</db:delete>
		<set-payload value="#[email]" doc:name="email" />
		<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
	</sub-flow>
	<sub-flow name="Get-Subscription"
		doc:description="input.payload = email
output.payload = Subscription | null">
        <db:select config-ref="MySQL_Configuration" doc:name="Get subscription">
            <db:parameterized-query><![CDATA[SELECT * FROM subscription WHERE email = #[payload]]]></db:parameterized-query>
        </db:select>

		<choice doc:name="Choice">
			<when expression="#[payload.isEmpty()]">
				<set-payload value="#[null]" doc:name="null" />
			</when>
			<otherwise>
				<set-payload value="#[payload[0]]" doc:name="subscription" />
				<json:object-to-json-transformer
					doc:name="Map to JSON" />
				<json:json-to-object-transformer
					returnClass="is.project3.subscriptions.Subscription" doc:name="JSON to Subscription" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="Validate-Subscription" doc:description="payload = Subscription">
		<set-variable variableName="subscription" value="#[payload]"
			doc:name="subscription" />
		<db:update config-ref="MySQL_Configuration" doc:name="Validate subscription">
			<db:parameterized-query><![CDATA[UPDATE subscription SET validated = 1 WHERE id = #[payload.id]]]></db:parameterized-query>
		</db:update>
		<set-payload value="#[subscription.email]" doc:name="subscription.email" />
		<flow-ref name="Get-Subscription" doc:name="Get-Subscription" />
	</sub-flow>
	<sub-flow name="Send-Mail" doc:description="Recebe as propriedades: to, cc, bcc, message">
		<set-variable variableName="mail" value="#[payload]"
			doc:name="mail" />
		<set-payload value="#[mail.content]" doc:name="mail.content" />
		<smtps:outbound-endpoint host="smtp.dei.uc.pt"
			port="465" user="${smtp.user}" password="${smtp.password}" to="#[mail.to]"
			subject="#[mail.subject]" responseTimeout="10000" doc:name="Send mail"
			bcc="#[mail.bcc]" cc="#[mail.cc]" connector-ref="SMTP_Connector"
			from="${smtp.user}@student.dei.uc.pt " replyTo="#[mail.replyto]" />
	</sub-flow>
	<flow name="Common-LoadSmartphones">
		<component class="is.project3.smartphones.tools.Validator"
			doc:name="Validator" />

		<choice tracking:enable-default-events="true" doc:name="Choice">
			<when expression="#[payload==null]">
				<set-payload value="Error!" doc:name="Set Payload" />
			</when>
			<otherwise>
				<mulexml:jaxb-xml-to-object-transformer
					encoding="UTF-8" jaxbContext-ref="JAXB_Context" doc:name="XML to JAXB Object" />
                <component class="is.project3.smartphones.tools.FilterScreenSize" doc:name="POJO-Filter"/>

				<set-session-variable variableName="timestamp"
					value="#[payload.getTimestamp().longValue()]" doc:name="Timestamp" />
				<set-session-variable variableName="version"
					value="#[payload.getVersion().longValue()]" doc:name="Version" />
				<set-session-variable variableName="crawler"
					value="#[payload.getCrawler()]" doc:name="Crawler" />
                <set-variable variableName="information" value="#[payload]" doc:name="Information"/>
                <transactional action="ALWAYS_BEGIN" doc:name="Transactional">
                    <db:delete config-ref="MySQL_Configuration" doc:name="Database">
                        <db:parameterized-query><![CDATA[DELETE FROM SMARTPHONE;]]></db:parameterized-query>
                    </db:delete>
                    <set-payload value="#[information]" doc:name="Set Payload"/>
                    <foreach collection="#[payload.getSmartphone()]" doc:name="For Each">
                        <db:insert config-ref="MySQL_Configuration" doc:name="Insert into Database">
                            <db:parameterized-query><![CDATA[INSERT INTO smartphone (VERSION, TIMESTAMP, CRAWLER, URL, TITLE, PRICE, PROCESSOR, SCREENTYPE, SCREENSIZE,OTHER) VALUES (#[sessionVars.version],#[sessionVars.timestamp],#[sessionVars.crawler], #[payload.url],#[payload.title],#[payload.price.value],#[payload.description.get(0).value],#[payload.description.get(1).value],#[payload.description.get(2).value],#[payload.description.get(3).value]);]]></db:parameterized-query>
                        </db:insert>
                    </foreach>
                </transactional>
                <set-payload value="success!" doc:name="Set Payload"/>

			</otherwise>
		</choice>
	</flow>
	<flow name="Directory-LoadSmartphones">
		<file:inbound-endpoint path="dropXMLdirectory"
			responseTimeout="10000" doc:name="File" />
		<file:file-to-string-transformer
			doc:name="File to String" encoding="UTF-8"/>
		<flow-ref name="Common-LoadSmartphones" doc:name="Common-LoadSmartphones" />
	</flow>
	<flow name="SOAP-LoadSmartphones">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/soap/loadxml" doc:name="HTTP" />
		<cxf:jaxws-service serviceClass="is.project3.smartphones.soap.LoadXML"
			doc:name="CXF" />
		<component doc:name="Java">
			<singleton-object class="is.project3.smartphones.soap.LoadXML" />
		</component>
		<flow-ref name="Common-LoadSmartphones" doc:name="Common-LoadSmartphones" />
	</flow>
    <flow name="SendDigest" initialState="started">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="1" timeUnit="DAYS"/>
            <db:select config-ref="MySQL_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[SELECT * FROM subscription]]></db:parameterized-query>
            </db:select>
        </poll>
        <choice doc:name="Choice">
            <when expression="#[payload.isEmpty]">
                <logger message="Subscription table is Empty" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <foreach collection="#[payload]" doc:name="For Each">
                    <set-variable variableName="email" value="#[payload.channel]" doc:name="Variable"/>
                    <db:select config-ref="MySQL_Configuration" doc:name="Database">
                        <db:parameterized-query><![CDATA[SELECT * FROM SMARTPHONE where SMARTPHONE.TITLE LIKE '%#[payload.favoriteBrand]%' AND SMARTPHONE.PRICE >= #[payload.minimumPrice]  AND SMARTPHONE.PRICE <= #[payload.maximumPrice];]]></db:parameterized-query>
                    </db:select>
                    <object-to-string-transformer doc:name="Object to String"/>
                    <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="integracaosistemas15" password="sistemas15" connector-ref="Gmail" to="#[email]" from="integracaosistemas2015@gmail.com" subject="Your digest for the day" responseTimeout="10000" doc:name="SMTP"/>
                </foreach>
            </otherwise>
        </choice>
    </flow>
</mule>
